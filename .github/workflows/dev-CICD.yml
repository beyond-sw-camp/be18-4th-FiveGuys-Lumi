name: dev-CICD.yml
on:
  push:
    branches: ["develop"]
  pull_request:
    branches: [ "develop" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: |
          ./gradlew clean build -x test

      - name: Docker Build and Push
        run: |
          # 1. Docker Hub 로그인 (비밀번호를 stdin으로 전달하여 보안 유지)
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

          # 2. 도커 이미지 빌드
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DEV_DOCKERHUB_REPOSITORY }} .

          # 3. 도커 이미지 푸시
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DEV_DOCKERHUB_REPOSITORY }}

      # GitHub의 아티팩트 저장소로 업로드
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose-artifact
          path: docker-compose.yaml

#  deploy:
#    if: github.event_name == 'push' || github.event_name == 'pull_request'
#    needs: build # build 작업이 성공한 후에만 deploy 작업 실행
#    runs-on: ubuntu-latest
#
#    steps:
#      # GitHub의 아티팩트 저장소에서 가져오기
#      - name: Download Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: docker-compose-artifact
#
#      - name: Set environment values
#        run: |
#          cd ./
#          touch ./.env
#          echo "${{ secrets.DEV_ENV }}" > .env
#        shell: bash
#
#      - name: Test SSH connection
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.DEV_PUBLIC_IP }}
#          username: ${{ secrets.DEV_USER }}
#          key: ${{ secrets.DEV_SSH_KEY }}
#          port: ${{ secrets.DEV_SSH_PORT }}
#          script: |
#            echo "[DEBUG] 현재 접속 사용자 확인:"
#            whoami
#            echo "[DEBUG] 홈 디렉토리 확인:"
#            echo $HOME
#            echo "Testing SSH connection"
#            uptime
#
#      - name: Deploy to Server
#        uses: appleboy/ssh-action@v1
#        with:
#          host: ${{ secrets.DEV_PUBLIC_IP }}
#          username: ${{ secrets.DEV_USER }}
#          key: ${{ secrets.DEV_SSH_KEY }}
#          port: ${{ secrets.DEV_SSH_PORT }}
#          debug: true
#          script: |
#            # 1. 필요한 파일들(docker-compose, .env)을 서버에 복사
#            scp ./docker-compose.yaml ./.env ${{ secrets.DEV_USER }}@${{ secrets.DEV_PUBLIC_IP }}:${{ secrets.DEV_PROJECT_PATH }}
#
#            # 2. 서버에서 도커 로그인 및 배포 스크립트 실행
#            cd ${{ secrets.DEV_PROJECT_PATH }}
#            echo ${{ secrets.DOCKERHUB_TOKEN }} | sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
#
#            sudo docker compose down
#            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DEV_DOCKERHUB_REPOSITORY }}
#            sudo docker compose up -d
#            sudo docker image prune -af --filter "until=24h"

